esphome:
  name: respeaker-lite
  project:
    name: diycraic.brick_assistant
    version: 2025.02.25
  min_version: 2025.3.3
  friendly_name: ReSpeaker-lite
  platformio_options:
    board_build.flash_mode: dio
  on_shutdown:
    then:
      # Prevent loud noise on software restart
      - lambda: id(respeaker).mute_speaker();

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_ESP32S3_INSTRUCTION_CACHE_32KB: "y"

      CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST: "y"
      CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY: "y"
      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: "y"
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: "y"

psram:
  mode: octal
  speed: 80MHz

logger:
  level: debug
  initial_level: debug
  logs:
    sensor: WARN  # avoids logging debug sensor updates

select:
  - platform: logger
    id: logger_select
    name: Logger Level
    disabled_by_default: true

api:
  services:
    - service: start_va
      then:
        - voice_assistant.start
    - service: stop_va
      then:
        - voice_assistant.stop

  on_client_connected:
    then:
      - logger.log: "Client connected"
      - light.turn_off: led_internal
      - delay: 50ms
      - micro_wake_word.start:

  on_client_disconnected:
    then:
      - logger.log: "Client disconnected"
      - voice_assistant.stop:

# Uncomment this, if you have problems with text-to-speech because of Home Assistant HTTPS internal URL
# http_request:
#   verify_ssl: false

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  on_connect:
    - logger.log: "wifi connected"
  on_disconnect:
    - logger.log: "wifi disconnected"
  output_power: 12.0 # Decrease TX power to ~12 dBm (helps with wifi stability for some reason)
  ap:
    ssid: "Respeaker-Lite Hotspot"
    password: "12345678"

captive_portal:

external_components:
  - source:
      type: git
      url: https://github.com/esphome/home-assistant-voice-pe
      ref: dev
    components:
      - micro_wake_word
      - microphone
      - voice_assistant
    refresh: 0s

  - source:
      type: git
      url: https://github.com/formatBCE/home-assistant-voice-pe
      ref: 48kHz_mic_support
    components:
      - nabu_microphone
    refresh: 0s

  - source:
      type: git
      url: https://github.com/Stepyon/Respeaker-Lite-ESPHome-BrickAssistant
      ref: main
    components:
      - respeaker_lite
    refresh: 0s

audio_dac:
  - platform: aic3204
    id: aic3204_dac
    i2c_id: internal_i2c

i2s_audio:
  - id: i2s_output
    i2s_lrclk_pin:
      number: GPIO7
      allow_other_uses: true
    i2s_bclk_pin:
      number: GPIO8
      allow_other_uses: true
    i2s_mclk_pin:
      number: GPIO9
      allow_other_uses: true

  - id: i2s_input
    i2s_lrclk_pin:
      number: GPIO7
      allow_other_uses: true
    i2s_bclk_pin:
      number: GPIO8
      allow_other_uses: true
    i2s_mclk_pin:
      number: GPIO9
      allow_other_uses: true

i2c:
  - id: internal_i2c
    sda: GPIO5
    scl: GPIO6
    frequency: 400kHz

respeaker_lite:
  id: respeaker
  reset_pin: GPIO2
  mute_state:
    internal: true
    id: mute_state
  firmware_version:
    icon: mdi:application-cog
    name: XMOS firmware version
    internal: false
    id: firmware_version
  firmware:
    url: https://github.com/Stepyon/Respeaker-Lite-ESPHome-BrickAssistant/raw/refs/heads/main/respeaker_lite_i2s_dfu_firmware_48k_v1.1.0.bin
    version: "1.1.0"
    md5: 9297155d1bf3eb21a9d4db52a89ea0c6
    on_begin:
      - light.turn_on:
          brightness: 100%
          red: 50%
          green: 50%
          blue: 50%
          id: led_internal
          effect: "Slow Pulse"
    on_end:
      - light.turn_on:
          brightness: 100%
          red: 0%
          green: 100%
          blue: 0%
          id: led_internal
          effect: "Fast Pulse"
      - delay: 3s
      - light.turn_off:
          id: led_internal
    on_error:
      - light.turn_on:
          brightness: 100%
          red: 100%
          green: 0%
          blue: 0%
          id: led_internal
          effect: "Fast Pulse"
      - delay: 3s
      - light.turn_off:
          id: led_internal

microphone:
  - platform: nabu_microphone
    id: nabu_mic
    i2s_din_pin: GPIO44
    adc_type: external
    pdm: false
    sample_rate: 48000
    bits_per_sample: 32bit
    i2s_mode: secondary
    i2s_audio_id: i2s_input
    channel_0:
      id: nabu_mic_va
      amplify_shift: 2
    channel_1:
      id: nabu_mic_mww
      amplify_shift: 4

globals:
  - id: va_connected
    type: bool
    restore_value: no
    initial_value: "false"
  - id: siren_on
    type: bool
    restore_value: no
    initial_value: "false"
  - id: last_toggle_time
    type: unsigned long
    restore_value: no
    initial_value: '0'
  - id: user_button_long_press_timer_running
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: saved_volume
    type: float
    restore_value: no
    initial_value: '0.5'

############################
# SCRIPTS
############################
script:
  - id: short_led_pulse
    mode: restart
    then:
      - light.turn_on:
          id: led_internal
          effect: "Fast Pulse"
          brightness: !lambda "return max(id(led).current_values.get_brightness(), 0.2f);"
          red: 0%
          green: 0%
          blue: 50%
      - delay: 100ms
      - light.turn_off: led_internal

  - id: timer_led_pulse
    mode: restart
    then:
      - light.turn_on:
          id: led_internal
          effect: "Timer Pulse"
          brightness: !lambda "return max(id(led).current_values.get_brightness(), 0.2f);"
          red: 100%
          green: 100%
          blue: 0%
      - delay: 30ms
      - light.turn_off: led_internal

  - id: activate_stop_word_if_tts_step_is_long
    then:
      - delay: 1s
      - lambda: id(stop).enable();

  - id: long_press_delay
    mode: restart
    then:
      - delay: 800ms
      - if:
          condition:
            binary_sensor.is_on: user_button
          then:
            - logger.log: "Detected a long press => Stopping media"
            - if:
                condition:
                  media_player.is_playing: external_media_player
                then:
                  - media_player.stop:
                else:
                  - logger.log: "Media not playing, nothing to stop"

  - id: timer_autooff_delay
    mode: restart
    then:
      - delay: 10min
      - if:
          condition:
            - switch.is_on: timer_ringing
          then:
            - switch.turn_off: timer_ringing

  - id: siren_autooff_delay
    mode: restart
    then:
      - delay: 20min
      - if:
          condition:
            - switch.is_on: siren_ringing
          then:
            - switch.turn_off: siren_ringing

  - id: save_volume
    then:
      - lambda: |-
          id(saved_volume) = id(external_media_player).volume;

  - id: restore_volume
    then:
      - lambda: |-
          float volume = id(saved_volume);
          auto call = id(external_media_player).make_call();
          call.set_volume(volume);
          call.perform();

############################
# BINARY SENSORS (BUTTONS)
############################
binary_sensor:
  - platform: gpio
    id: user_button
    internal: true
    name: "Volume Down / Stop Button"
    pin:
      number: GPIO4
      mode:
        input: true
      inverted: true
    on_press:
      then:
        - if:
            condition:
              or:
                - switch.is_on: timer_ringing
                - switch.is_on: siren_ringing
            then:
              - logger.log: "Siren/Timer ON => turning OFF"
              - switch.turn_off: timer_ringing
              - switch.turn_off: siren_ringing
            else:
              - media_player.volume_set:
                  id: external_media_player
                  volume: !lambda |-
                    float vol = id(external_media_player).volume - 0.1f;
                    if (vol < 0.0f) {
                      vol = 0.0f;
                      id(short_led_pulse).execute();
                    }
                    return vol;
              - if:
                  condition:
                    media_player.is_playing: external_media_player
                  then:
                    - script.execute: long_press_delay
                  else:
                    - media_player.speaker.play_on_device_media_file:
                        media_file: button_press_sound
                        announcement: true

    on_release:
      then:
        - script.stop: long_press_delay

  - platform: template
    id: mic_mute_button
    internal: true
    name: "Volume Up / Mute Button"
    lambda: |-
      // Guard: if (mute_state) isn't ready, default to false
      if (!id(mute_state).has_state()) {
        return false;
      }
      // Return true if the mic is muted, false if not
      return id(mute_state).state;
    on_state:
      then:
        - if:
            condition: # First, guard to ensure mute_state is valid
              lambda: return id(mute_state).has_state();
            then:
              - logger.log: "Mute Button - on_state"
              - if:
                  condition:
                    or:
                      - switch.is_on: timer_ringing
                      - switch.is_on: siren_ringing
                  then:
                    - switch.turn_off: timer_ringing
                    - switch.turn_off: siren_ringing
                    - logger.log: "Siren/Timer is ON => turning Siren/Timer OFF"
                  else:
                    - lambda: |-
                        unsigned long now = millis();
                        // Check if it's a fast toggle (<2s)
                        if ((now - id(last_toggle_time)) < 2000UL) {
                          float current_vol = id(external_media_player).volume;
                          if (current_vol >= 1.0f) {
                            id(short_led_pulse).execute();
                            return;
                          }
                          float vol = current_vol + 0.1f;
                          if (vol > 1.0f) vol = 1.0f;
                          auto call = id(external_media_player).make_call();
                          call.set_volume(vol);
                          call.perform();
                        }
                        id(last_toggle_time) = now;

                    - if:
                        condition:
                          not:
                            media_player.is_playing: external_media_player
                        then:
                          - media_player.speaker.play_on_device_media_file:
                              media_file: button_press_sound
                              announcement: true

############################
# SPEAKER & MEDIA PLAYERS
############################
speaker:
  - platform: i2s_audio
    id: i2s_audio_speaker
    sample_rate: 48000
    i2s_mode: secondary
    i2s_dout_pin: GPIO43
    bits_per_sample: 32bit
    i2s_audio_id: i2s_output
    dac_type: external
    channel: stereo
    timeout: never
    buffer_duration: 100ms
    audio_dac: aic3204_dac

  - platform: mixer
    id: mixing_speaker
    output_speaker: i2s_audio_speaker
    num_channels: 2
    source_speakers:
      - id: announcement_mixing_input
        timeout: never
      - id: media_mixing_input
        timeout: never

  - platform: resampler
    id: announcement_resampling_speaker
    output_speaker: announcement_mixing_input
    sample_rate: 48000
    bits_per_sample: 16

  - platform: resampler
    id: media_resampling_speaker
    output_speaker: media_mixing_input
    sample_rate: 48000
    bits_per_sample: 16

media_player:
  - platform: speaker
    id: external_media_player
    name: Media Player
    internal: false
    volume_increment: 0.05
    volume_min: 0.3
    volume_max: 0.8
    announcement_pipeline:
      speaker: announcement_resampling_speaker
      format: FLAC
      num_channels: 1
      sample_rate: 48000
    media_pipeline:
      speaker: media_resampling_speaker
      format: FLAC
      num_channels: 2
      sample_rate: 48000
    on_announcement:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 30
          duration: 500ms
      - wait_until:
          not:
            media_player.is_announcing: external_media_player
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 0
          duration: 1.0s
    files:
      - id: siren_sound
        file: https://github.com/Stepyon/Respeaker-Lite-ESPHome-BrickAssistant/raw/refs/heads/BrickAssistant/sounds/siren.wav
      - id: timer_finished_sound
        file: https://github.com/Stepyon/Respeaker-Lite-ESPHome-BrickAssistant/raw/refs/heads/BrickAssistant/sounds/timer_finished.flac
      - id: wake_word_triggered_sound
        file: https://github.com/Stepyon/Respeaker-Lite-ESPHome-BrickAssistant/raw/refs/heads/BrickAssistant/sounds/wake_word_triggered.flac
      - id: button_press_sound
        file: https://github.com/Stepyon/Respeaker-Lite-ESPHome-BrickAssistant/raw/refs/heads/BrickAssistant/sounds/click.mp3
      - id: notification_sound
        file: https://github.com/Stepyon/Respeaker-Lite-ESPHome-BrickAssistant/raw/refs/heads/BrickAssistant/sounds/notification.mp3
      - id: connection_problem_sound
        file: https://github.com/Stepyon/Respeaker-Lite-ESPHome-BrickAssistant/raw/refs/heads/BrickAssistant/sounds/connection_problem.mp3

############################
# MICRO WAKE WORD
############################
micro_wake_word:
  id: mww
  models:
    - model: https://github.com/kahrendt/microWakeWord/releases/download/okay_nabu_20241226.3/okay_nabu.json
      probability_cutoff: 0.8
      id: okay_nabu
    - model: hey_jarvis
      id: hey_jarvis
      probability_cutoff: 0.8
    - model: hey_mycroft
      id: hey_mycroft
      probability_cutoff: 0.8
    - model: https://github.com/kahrendt/microWakeWord/releases/download/stop-20241016.2/stop.json
      probability_cutoff: 0.4
      id: stop
      internal: true
  vad:
    probability_cutoff: 0.1
  microphone: nabu_mic_mww
  on_wake_word_detected:
    - logger.log:
        format: "Wake word was: %s"
        args: [ 'wake_word' ]
    - voice_assistant.stop:
    - if:
        condition:
          - switch.is_on: timer_ringing
        then:
          - switch.turn_off: timer_ringing
    - if:
        condition:
          media_player.is_announcing:
        then:
          - media_player.stop:
              announcement: true
    - if:
        condition:
          lambda: return wake_word != "Stop";
        then:
          - if:
              condition:
                lambda: |-
                  return id(va_connected);
              then:
                - light.turn_on:
                    id: led_internal
                    brightness: !lambda "return max(id(led).current_values.get_brightness(), 0.2f);"
                    red: 50%
                    green: 100%
                    blue: 100%
                    effect: "Slow Pulse"
                - media_player.speaker.play_on_device_media_file:
                    media_file: wake_word_triggered_sound
                    announcement: true
                - delay: 500ms
                - wait_until:
                    not:
                      media_player.is_announcing: external_media_player
                - voice_assistant.start:
                    wake_word: !lambda return wake_word;
                    silence_detection: true
              else:
                - delay: 1s
                - media_player.speaker.play_on_device_media_file:
                    media_file: connection_problem_sound
                    announcement: true
        else:
          - logger.log: "Stop wake word was used!"
          - light.turn_on:
              id: led_internal
              effect: "Timer Pulse"
              brightness: !lambda "return max(id(led).current_values.get_brightness(), 0.2f);"
              red: 100%
              green: 0%
              blue: 0%
          - delay: 300ms
          - light.turn_off: led_internal

############################
# VOICE ASSISTANT
############################
voice_assistant:
  id: va
  micro_wake_word: mww
  use_wake_word: false
  microphone: nabu_mic_va
  noise_suppression_level: 1
  auto_gain: 0dBFS
  volume_multiplier: 1
  media_player: external_media_player

  on_client_connected:
    then:
      - light.turn_off: led_internal
      - globals.set:
          id: va_connected
          value: "true"

  on_client_disconnected:
    then:
      - globals.set:
          id: va_connected
          value: "false"
      - light.turn_on:
          id: led_internal
          brightness: !lambda "return max(id(led).current_values.get_brightness(), 0.2f);"
          red: 100%
          green: 50%
          blue: 0%
          effect: "Slow Pulse"

  on_tts_start:
    - if:
        condition:
          - switch.is_off: siren_ringing
        then:
          - logger.log: "VA: on_tts_start"
          - script.execute: activate_stop_word_if_tts_step_is_long

  on_stt_end:
    - light.turn_off: led_internal

  on_start:
    - if:
        condition:
          - switch.is_off: siren_ringing
        then:
          - logger.log: "VA: on_start"
          - light.turn_on:
              id: led_internal
              brightness: !lambda "return max(id(led).current_values.get_brightness(), 0.2f);"
              red: 50%
              green: 100%
              blue: 100%
              effect: "Slow Pulse"
          - mixer_speaker.apply_ducking:
              id: media_mixing_input
              decibel_reduction: 30  # Number of dB quieter; higher implies more quiet, 0 implies full volume
              duration: 0.0s         # The duration of the transition (default is no transition)

  on_end:
    - if:
        condition:
          - switch.is_off: siren_ringing
        then:    
          - wait_until:
              not:
                voice_assistant.is_running
          - logger.log: "VA: on_end"
          - mixer_speaker.apply_ducking:
              id: media_mixing_input
              decibel_reduction: 0
              duration: 1.0s
          - script.stop: activate_stop_word_if_tts_step_is_long
          - if:
              condition:
                - switch.is_off: timer_ringing
              then:
                - lambda: id(stop).disable();
                - light.turn_off: led_internal

  on_timer_tick:
    - if:
        condition:
          not:
            voice_assistant.is_running
        then:
          - lambda: |-
              id(timer_led_pulse).execute();

  on_timer_finished:
    - switch.turn_on: timer_ringing
    - while:
        condition:
          switch.is_on: timer_ringing
        then:
          - media_player.speaker.play_on_device_media_file:
              media_file: timer_finished_sound
              announcement: true
          - wait_until:
              media_player.is_announcing: external_media_player
          - wait_until:
              not:
                media_player.is_announcing: external_media_player
    - light.turn_off: led_internal

  on_timer_cancelled:
    - light.turn_off: led_internal

############################
# SWITCHES (SIREN / TIMER)
############################
switch:
  - platform: template
    id: siren_ringing
    name: "Siren Ring"
    internal: false
    optimistic: false
    restore_mode: ALWAYS_OFF
    lambda: |-
      return id(siren_on);
    turn_on_action:
      - globals.set:
          id: siren_on
          value: "true"
      - lambda: id(siren_ringing).publish_state(true);
      - if:
          condition:
            - switch.is_on: timer_ringing
          then:
            - switch.turn_off: timer_ringing

      - media_player.stop:
      - delay: 500ms
      - script.execute: save_volume
      - media_player.volume_set:
          id: external_media_player
          volume: 1.0
      - script.execute: siren_autooff_delay
      - while:
          condition:
            switch.is_on: siren_ringing
          then:
            - light.turn_on:
                id: led_internal
                effect: "Siren Pulse"
                brightness: 100%
                red: 100%
                green: 0%
                blue: 0%
            - media_player.speaker.play_on_device_media_file:
                media_file: siren_sound
                announcement: false
            - delay: 6s
            - wait_until:
                not:
                  media_player.is_playing: external_media_player

    turn_off_action:
      - globals.set:
          id: siren_on
          value: "false"
      - lambda: id(siren_ringing).publish_state(false);
      - light.turn_off: led_internal
      - script.stop: siren_autooff_delay
      - media_player.stop:
          announcement: false
      - script.execute: restore_volume

  - platform: template
    name: "Timer Ring"
    id: timer_ringing
    optimistic: true
    restore_mode: ALWAYS_OFF

    on_turn_on:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 10
          duration: 0.0s
      - lambda: id(stop).enable();
      - light.turn_on:
          id: led_internal
          effect: "Fast Pulse"
          brightness: !lambda "return max(id(led).current_values.get_brightness(), 0.2f);"
          red: 0%
          green: 100%
          blue: 100%
      - script.execute: timer_autooff_delay
      - while:
          condition:
            switch.is_on: timer_ringing
          then:
            - media_player.speaker.play_on_device_media_file:
                media_file: timer_finished_sound
                announcement: true
            - wait_until:
                media_player.is_announcing: external_media_player
            - wait_until:
                not:
                  media_player.is_announcing: external_media_player

    on_turn_off:
      - lambda: id(stop).disable();
      - light.turn_off: led_internal
      - script.stop: timer_autooff_delay
      - media_player.stop:
          announcement: true
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 0
          duration: 1.0s

  - platform: template
    id: notification_ringing
    name: "Notification"
    optimistic: true
    internal: false
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0.0s
      - light.turn_on:
          id: led_internal
          brightness: !lambda "return max(id(led).current_values.get_brightness(), 0.2f);"
          red: 70%
          green: 100%
          blue: 100%
          effect: "Timer Pulse"
      - media_player.speaker.play_on_device_media_file:
          media_file: notification_sound
          announcement: true
      - wait_until:
          media_player.is_announcing: external_media_player
      - wait_until:
          not:
            media_player.is_announcing: external_media_player
      - switch.turn_off: notification_ringing
    
    on_turn_off:
      - light.turn_off: led_internal
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 0
          duration: 1.0s

############################
# LED(s)
############################

# Hardware LED (hidden from user)
light:
  - platform: esp32_rmt_led_strip
    id: led_internal
    internal: true
    name: "LED Internal (Hardware)"
    pin: GPIO1
    chipset: ws2812
    num_leds: 1
    rgb_order: grb
    rmt_symbols: 192
    default_transition_length: 0s
    disabled_by_default: true

    effects:
      - addressable_lambda:
          name: "Siren Pulse"
          update_interval: 20ms
          lambda: |-
            static float fraction = 0.0;
            static float step = 0.05;
            static bool increasing = true;

            auto values = id(led_internal)->current_values;
            float user_r = values.get_red()   * 255.0f;
            float user_g = values.get_green() * 255.0f;
            float user_b = values.get_blue()  * 255.0f;
            float user_v = values.get_brightness();

            float scale = fraction * user_v;
            it[0].set_rgb(user_r * scale, user_g * scale, user_b * scale);

            fraction += (increasing ? step : -step);
            if (fraction >= 1.0f) {
              fraction = 1.0f;
              increasing = false;
            } else if (fraction <= 0.0f) {
              fraction = 0.0f;
              increasing = true;
            }

      - addressable_lambda:
          name: "Slow Pulse"
          update_interval: 30ms
          lambda: |-
            static float fraction = 0.0;
            static float step = 0.05;
            static bool increasing = true;

            auto values = id(led_internal)->current_values;
            float user_r = values.get_red()   * 255.0f;
            float user_g = values.get_green() * 255.0f;
            float user_b = values.get_blue()  * 255.0f;
            float user_v = values.get_brightness();

            float scale = fraction * user_v;
            it[0].set_rgb(user_r * scale, user_g * scale, user_b * scale);

            fraction += (increasing ? step : -step);
            if (fraction >= 1.0f) {
              fraction = 1.0f;
              increasing = false;
            } else if (fraction <= 0.0f) {
              fraction = 0.0f;
              increasing = true;
            }

      - addressable_lambda:
          name: "Fast Pulse"
          update_interval: 10ms
          lambda: |-
            static float fraction = 0.0;
            static float step = 0.05;
            static bool increasing = true;

            auto values = id(led_internal)->current_values;
            float user_r = values.get_red()   * 255.0f;
            float user_g = values.get_green() * 255.0f;
            float user_b = values.get_blue()  * 255.0f;
            float user_v = values.get_brightness();

            float scale = fraction * user_v;
            it[0].set_rgb(user_r * scale, user_g * scale, user_b * scale);

            fraction += (increasing ? step : -step);
            if (fraction >= 1.0f) {
              fraction = 1.0f;
              increasing = false;
            } else if (fraction <= 0.0f) {
              fraction = 0.0f;
              increasing = true;
            }

      - addressable_lambda:
          name: "Timer Pulse"
          lambda: |-
            auto values = id(led_internal)->current_values;
            float user_r = values.get_red()   * 255.0f;
            float user_g = values.get_green() * 255.0f;
            float user_b = values.get_blue()  * 255.0f;
            float user_v = values.get_brightness();
            it[0].set_rgb(user_r * user_v, user_g * user_v, user_b * user_v);

# Partition Light => user sees "Led Light" in Home Assistant
# It references the single LED in led_internal, from index 0..0
  - platform: partition
    id: led
    name: "LED Light"
    entity_category: config
    default_transition_length: 0s
    disabled_by_default: false
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:circle-outline"
    initial_state:
      color_mode: rgb
      brightness: 100%
      red: 10%
      green: 73%
      blue: 95%
    segments:
      - id: led_internal
        from: 0
        to: 0
